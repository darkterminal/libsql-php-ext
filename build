#!/bin/bash

install_jq() {
    local os_name="$1"

    if ! command -v jq &>/dev/null; then
        echo "jq is not installed. Installing jq..."
        
        if [[ "$os_name" == "Linux" ]]; then
            if command -v apt-get &>/dev/null; then
                sudo apt-get update
                sudo apt-get install -y jq
            elif command -v yum &>/dev/null; then
                sudo yum install -y jq
            else
                echo "Error: Unsupported package manager."
                exit 1
            fi
        elif [[ "$os_name" == "Darwin" ]]; then
            brew install jq
        else
            echo "Error: Unsupported operating system."
            exit 1
        fi
        
        if ! command -v jq &>/dev/null; then
            echo "Error: Failed to install jq."
            exit 1
        fi

        echo "jq has been installed successfully."
    fi
}

install_cargo() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt-get &>/dev/null; then
            echo "Installing Rust and Cargo using apt-get..."
            sudo apt-get update
            sudo apt-get install -y curl
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        elif command -v yum &>/dev/null; then
            echo "Installing Rust and Cargo using yum..."
            sudo yum install -y curl
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        else
            echo "Error: Neither apt-get nor yum found. Please install Rust and Cargo manually."
            exit 1
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        if command -v brew &>/dev/null; then
            echo "Installing Rust and Cargo using brew..."
            brew install rust
        else
            echo "Error: Homebrew not found. Please install Homebrew and then install Rust and Cargo manually."
            exit 1
        fi
    else
        echo "Error: Unsupported OS. Please install Rust and Cargo manually."
        exit 1
    fi
}

install_compiler() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt-get &>/dev/null; then
            echo "Installing C/C++ compiler using apt-get..."
            sudo apt-get update
            sudo apt-get install -y build-essential
        elif command -v yum &>/dev/null; then
            echo "Installing C/C++ compiler using yum..."
            sudo yum groupinstall -y "Development Tools"
        else
            echo "Error: Neither apt-get nor yum found. Please install a C/C++ compiler manually."
            exit 1
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        if command -v brew &>/dev/null; then
            echo "Installing C/C++ compiler using brew..."
            brew install gcc
        else
            echo "Error: Homebrew not found. Please install Homebrew and then install a C/C++ compiler manually."
            exit 1
        fi
    else
        echo "Error: Unsupported OS. Please install a C/C++ compiler manually."
        exit 1
    fi
}

check_composer_json() {
    local composer_file="$1"
    local key_name="$2"
    local project_dir="$3"

    if [ ! -f "$composer_file" ]; then
        echo "Error: $composer_file not found in the project directory."
        exit 1
    fi

    local actual_key_name=$(jq -r '.name' "$composer_file")

    if [ "$actual_key_name" != "$key_name" ]; then
        return 1
    fi

    return 0
}

build_extension() {
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Cargo.toml file not found in the extension directory. Please make sure it exists."
        exit 1
    fi

    echo "Building the extension..."
    cargo build --release

    echo "Checking if libs directory exists..."
    if [ ! -d "libs" ]; then
        echo "Creating libs directory..."
        mkdir libs
    fi

    echo "Copying lib into libs directory..."
    cp "target/release/libsql_php_client.so" libs/
}

project_dir=$(pwd)
extension_dir="vendor/darkterminal/libsql-php-ext"
os_name=$(uname)

if [[ "$os_name" != "Linux" && "$os_name" != "Darwin" ]]; then
    echo "Error: This script requires a UNIX-like operating system (Linux or macOS) to run."
    exit 1
fi

if ! php -m | grep -q 'FFI'; then
    echo "Error: PHP FFI extension is not enabled. Please enable PHP FFI to proceed."
    exit 1
fi

if ! command -v cargo &>/dev/null; then
    echo "Rust and Cargo not found. Installing..."
    install_cargo
else
    echo "Rust and Cargo are already installed."
fi

if ! command -v cc &>/dev/null && ! command -v gcc &>/dev/null && ! command -v g++ &>/dev/null; then
    echo "C/C++ compiler not found. Installing..."
    install_compiler
else
    echo "C/C++ compiler is already installed."
fi

echo "😎 OhMyPunk! You're using $os_name"
echo "+ PHP FFI Extension is enabled ✅"
echo "+ 🦀 + 📦 is ready ✅"
echo "+ C/C++ Compiler already set up! 🍻"

install_jq "$os_name"

if ! check_composer_json "composer.json" "darkterminal/libsql-php-ext" "$project_dir"; then
    
    cd "$extension_dir" || exit
    
    build_extension

    cd "$project_dir" || exit

else
    build_extension
fi

echo "Building the extension is done! ✨"
